//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SimpleCrud.Core
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SimpleCrudEntities : DbContext
    {
        public SimpleCrudEntities()
            : base("name=SimpleCrudEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int sc_DeleteEmployee(Nullable<long> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sc_DeleteEmployee", employeeIDParameter);
        }
    
        public virtual int sc_InsertEmployee(string fullName, string position, string empCode, string mobile)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("fullName", fullName) :
                new ObjectParameter("fullName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(string));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("empCode", empCode) :
                new ObjectParameter("empCode", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sc_InsertEmployee", fullNameParameter, positionParameter, empCodeParameter, mobileParameter);
        }
    
        public virtual ObjectResult<sc_ListEmployee_Result> sc_ListEmployee(Nullable<long> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sc_ListEmployee_Result>("sc_ListEmployee", employeeIDParameter);
        }
    
        public virtual int sc_UpdateEmployee(Nullable<long> employeeID, string fullName, string position, string empCode, string mobile)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(long));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("fullName", fullName) :
                new ObjectParameter("fullName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(string));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("empCode", empCode) :
                new ObjectParameter("empCode", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sc_UpdateEmployee", employeeIDParameter, fullNameParameter, positionParameter, empCodeParameter, mobileParameter);
        }
    }
}
